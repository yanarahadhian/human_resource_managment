# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))

# Commonly used webrat steps
# http://github.com/brynary/webrat

Dengan /^(?:|pengguna |saya )berada di (.+)$/ do |page_name|  
  visit path_to(page_name)
end

Ketika /^(?:|pengguna |saya )berkunjung ke (.+)$/ do |page_name|
  visit path_to(page_name)
end

Ketika /^(?:|pengguna |saya )menekan "([^"]*)"$/ do |button|
  click_button(button)
end

Ketika /^(?:|pengguna |saya )klik "([^"]*)"$/ do |link|
  click_link(link)
end

Ketika /^(?:|pengguna |saya )klik "([^"]*)" di dalam "([^"]*)"$/ do |link, parent|
  click_link_within(parent, link)
end

Ketika /^(?:|pengguna |saya )mengisi "([^"]*)" dengan "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

Ketika /^(?:|pengguna |saya )isikan "([^"]*)" untuk "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
Ketika /^(?:|pengguna |saya )isikan yang berikut ini:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

Ketika /^(?:|pengguna |saya )memilih "([^"]*)" dari "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

# Use this step in conjunction with Rail's datetime_select helper. For example:
# When I select "December 25, 2008 10:00" as the date and time
Ketika /^(?:|pengguna |saya )memilih "([^"]*)" sebagai tanggal dan waktu$/ do |time|
  select_datetime(time)
end

# Use this step when using multiple datetime_select helpers on a page or
# you want to specify which datetime to select. Given the following view:
#   <%= f.label :preferred %><br />
#   <%= f.datetime_select :preferred %>
#   <%= f.label :alternative %><br />
#   <%= f.datetime_select :alternative %>
# The following steps would fill out the form:
# When I select "November 23, 2004 11:20" as the "Preferred" date and time
# And I select "November 25, 2004 10:30" as the "Alternative" date and time
Ketika /^(?:|pengguna |saya )memilih "([^"]*)" sebagai "([^"]*)" tanggal dan waktu$/ do |datetime, datetime_label|
  select_datetime(datetime, :from => datetime_label)
end

# Use this step in conjunction with Rail's time_select helper. For example:
# When I select "2:20PM" as the time
# Note: Rail's default time helper provides 24-hour time-- not 12 hour time. Webrat
# will convert the 2:20PM to 14:20 and then select it.
Ketika /^(?:|pengguna |saya )memilih "([^"]*)" sebagai waktu$/ do |time|
  select_time(time)
end

# Use this step when using multiple time_select helpers on a page or you want to
# specify the name of the time on the form.  For example:
# Ketika saya memilih "7:30AM" sebagai waktu "Gym"
Ketika /^(?:|pengguna |saya )memilih "([^"]*)" sebagai waktu "([^"]*)"$/ do |time, time_label|
  select_time(time, :from => time_label)
end

# Use this step in conjunction with Rail's date_select helper.  For example:
# When I select "February 20, 1981" as the date
Ketika /^(?:|pengguna |saya )memilih "([^"]*)" sebagai tanggal$/ do |date|
  select_date(date)
end

# Use this step when using multiple date_select helpers on one page or
# you want to specify the name of the date on the form. For example:
# Ketika saya memilih "April 26, 1982" sebagai tanggal "Date of Birth"
Ketika /^(?:|pengguna |saya )memilih "([^"]*)" sebagai tanggal "([^"]*)"$/ do |date, date_label|
  select_date(date, :from => date_label)
end

Ketika /^(?:|pengguna |saya )mencentang "([^"]*)"$/ do |field|
  check(field)
end

Ketika /^(?:|pengguna |saya )menghapus centang "([^"]*)"$/ do |field|
  uncheck(field)
end

Ketika /^(?:|pengguna |saya )memilih "([^"]*)"$/ do |field|
  choose(field)
end

# Adds support for validates_attachment_content_type. Without the mime-type getting
# passed to attach_file() you will get a "Photo file is not one of the allowed file types."
# error message
Ketika /^(?:|pengguna |saya )melampirkan berkas "([^"]*)" ke "([^"]*)"$/ do |path, field|
  type = path.split(".")[1]

  case type
  when "jpg"
    type = "image/jpg"
  when "jpeg"
    type = "image/jpeg"
  when "png"
    type = "image/png"
  when "gif"
    type = "image/gif"
  end

  attach_file(field, path, type)
end

Maka /^(?:|pengguna |saya )seharusnya melihat "([^"]*)"$/ do |text|
  if response.respond_to? :should
    response.should contain(text)
  else
    assert_contain text
  end
end

Maka /^(?:|pengguna |saya )seharusnya melihat "([^"]*)" di dalam "([^"]*)"$/ do |text, selector|
  within(selector) do |content|
    if content.respond_to? :should
      content.should contain(text)
    else
      hc = Webrat::Matchers::HasContent.new(text)
      assert hc.matches?(content), hc.failure_message
    end
  end
end

Maka /^(?:|pengguna |saya )seharusnya melihat \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)
  if response.respond_to? :should
    response.should contain(regexp)
  else
    assert_match(regexp, response_body)
  end
end

Maka /^(?:|pengguna |saya )seharusnya melihat \/([^\/]*)\/ within "([^"]*)"$/ do |regexp, selector|
  within(selector) do |content|
    regexp = Regexp.new(regexp)
    if content.respond_to? :should
      content.should contain(regexp)
    else
      assert_match(regexp, content)
    end
  end
end

Maka /^(?:|pengguna |saya )seharusnya tidak melihat "([^"]*)"$/ do |text|
  if response.respond_to? :should_not
    response.should_not contain(text)
  else
    assert_not_contain(text)
  end
end

Maka /^(?:|pengguna |saya )seharusnya tidak melihat "([^"]*)" di dalam "([^"]*)"$/ do |text, selector|
  within(selector) do |content|
    if content.respond_to? :should_not
      content.should_not contain(text)
    else
      hc = Webrat::Matchers::HasContent.new(text)
      assert !hc.matches?(content), hc.negative_failure_message
    end
  end
end

Maka /^(?:|pengguna |saya )seharusnya tidak melihat \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)
  if response.respond_to? :should_not
    response.should_not contain(regexp)
  else
    assert_not_contain(regexp)
  end
end

Maka /^(?:|pengguna |saya )seharusnya tidak melihat  \/([^\/]*)\/ di dalam "([^"]*)"$/ do |regexp, selector|
  within(selector) do |content|
    regexp = Regexp.new(regexp)
    if content.respond_to? :should_not
      content.should_not contain(regexp)
    else
      assert_no_match(regexp, content)
    end
  end
end

Maka /^field "([^"]*)" seharusnya memuat "([^"]*)"$/ do |field, value|
  field_value = field_labeled(field).value
  if field_value.respond_to? :should
    field_value.should =~ /#{value}/
  else
    assert_match(/#{value}/, field_value)
  end
end

Maka /^field "([^"]*)" seharusnya tidak memuat "([^"]*)"$/ do |field, value|
  field_value = field_labeled(field).value
  if field_value.respond_to? :should_not
    field_value.should_not =~ /#{value}/
  else
    assert_no_match(/#{value}/, field_value)
  end
end

Maka /^checkbox "([^"]*)" seharusnya tercentang$/ do |label|
  field = field_labeled(label)
  if field.respond_to? :should
    field.should be_checked
  else
    assert field.checked?
  end
end

Maka /^checkbox "([^"]*)" seharusnya tidak tercentang$/ do |label|
  field = field_labeled(label)
  if field.respond_to? :should_not
    field.should_not be_checked
  else
    assert !field.checked?
  end
end

Maka /^(?:|pengguna |saya )seharusnya berada di (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Maka /^(?:|pengguna |saya )seharusnya mempunyai string query berikut ini:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')}

  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Maka /^tunjukan halamannya kepada saya$/ do
  save_and_open_page
end

# custom helper
Dengan /^(?:|pengguna |saya )telah login$/ do
  @token_string = 'okolzakkxtjslgoaannktdqcxdtcaipdtxqszaxj'
  visit "/user_sessions/callback?token_string=#{@token_string}&user_log_id=2675&permalink=cgn-printing-mills"
end

Maka /^ satu pengguna telah login$/ do
  @token_string = 'okolzakkxtjslgoaannktdqcxdtcaipdtxqszaxj'
  visit "/user_sessions/callback?token_string=#{@token_string}&user_log_id=2675&permalink=cgn-printing-mills"
end